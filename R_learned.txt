<<<<<<< HEAD
Cousera class

Week 1
Lecture - Data Types(31:06)
=======
R has five basic or "atomic" classes of objects
  character
  numeric (real numbers)
  integer
  complex
  logical (True/False)

Empty vectors can be created with the vector() function

If you explicitly want an integer, you need to specify the L suffix.
ie) 1 gives you a numeric object
ie) 1L gives you an integer object

Inf is a special number and represents Infinity

Attributes of an object can be accessed	using the attributes() function

Assignment operator is <-
ie) x <-5

to print, use print(variable)
ie) print(x)

use the hash (#) character to comment
ie) #this is a comment

to create a range, use number:number
ie) x <- 1:20 #creates a range between 1 and 20 and assigns to x

c() function can be used to create vectors
ie) x <- c(0.5, 0.6)

vector() function can also be used to create vectors
ie) x <- vector("numeric", length=10)

To explicitly coerce one class to another, use as.* functions
ie) x <- 5
ie) class(x)
ie) as.numeric(x)
ie) as.logical(x)
ie) as.character(x)
ie) as.complex(x)

To create a matrix
ie) m <- matrix(nrow =2, ncol = 3)

dim() gets the dimesions of the matrix
ie) dim(m)

attributes(m) gets the attributes of the matrix
ie) attributes(m)

Matrices are constructed column wise, so entries can be thought of
starting in the "upper left" corner and running down the columns
ie) m <- matrix(1:6, nrow=2, ncol=3)

Matrices can also be created directly from vectors by adding a dimension
attribute
ie) m <- 1:10
ie) dim(m) <- c(2,5)

A third way of creating matrices can be by column-binding or row-binding with
cbind() and rbind()
ie) x <- 1:3
ie) y <- 10:12
ie)cbind(x, y)
ie)rbind(x, y)

Lists are a special type of vector that can contain elements of different
classes.
ie) x <- list(1, "a", TRUE, 1+4i)

Factors are used to represent categorical data (ie gender M/F(. Factors can be
unordered or ordered. One can think of a factor as an integer vector where
each integer has a label. Using factors with labels is better than integers
because factors are self-describing; having a variable that has values
"Male" and "Female" is better than a variable that has values 1 and 2.
ie) x <- factor(x("yes", "yes", "no", "yes", "no"))
ie) x
ie) table(x) #gives a frequency of the elements of each level
ie) unclass(x) #strips out the label and presents the underlying numbers

The order of the levels can be set using the levels argument to factor(). This
can be important in linear modelling because the first level is used as the
baseline level.
ie) x <- factor(c("yes", "yes", "no", "yes", "no"), levels = c("yes", "no"))
this sets "yes" as the first/baseline level, and "no" as the second level

Missing values are denoted by NA or NaN for undefined mathematical operations.
A NaN value is also NA but the converse is not true.
is.na() is used to test objects if they are NA
is.nan() is used to test for NaN

Data frames are used to store tabular data.
-They are represented as a special type of list where every element of the
list has the same length.
-Each element of the list can be thought of as a column and the length of each
element of the list is the number of rows.
-Unlike matrices, data frames can store different classes of objects in each
column (just like lists); matrices must have every element be the same class
-Data frames also have a special attribute called row.names
-Data frames are usually created by calling read.table() or read.csv()
-Can be converted to a matrix by calling data.matrix()
ie) x <- data.frame(foo = 1:4, bar = c(T,T,F,F))
ie) x
ie) nrow(x)
ie) ncol(x)

R objects can also have names, which is very useful for writing readable code
and self-describing objects.
ie) x <- 1:3
ie) names(x)
ie) names(x) <- c("foo", "bar", "norf)
ie) names(x)

Lists can also have names.
ie) x<- list(a=1, b=2, c=3)
ie) x

And Matrices can also have names.
ie) m <- matrix(1:4, nrow=2, ncol=2)
ie) dimnames(m) <- list(c("a", "b"), c("c", "d"))
ie) m

There are a number of operators that can be used to extract subsets of R
objects.
[ always returns an object of the same class as the original; can be used to
select more than one element(there is one exception)
[[ is used to extract elements of a list or a data frame it can only be used
to extract a single element and the class of the returned object will not
necessarily be a list or data frame
$ is used to extract elements of a list or data frame by name; semantics are
similar to hat of [[
ie) <- c("a", "b", "c", "c", "d", "a")
ie) x[1]
[1] "a"
ie) x[2]
[1] "b"
ie) x[1:4]
[1] "a" "b" "c" "c"
ie) x[x > "a"]
[1] "b" "c" "c" "d"
ie) u <- x > "a"
[1] FALSE TRUE TRUE TRUE TRUE FALSE
ie) x[u]
[1] "b" "c" "c" "d"
create a 2x3 matrix in the 1:6 range, and get subset elements
ie) x <- matrix(1:6, 2, 3)
ie) x[1, 2]
[1] 3
ie) x[2, 1]
[1] 2
indices can also be missing
ie) x[1, ]
[1] 1 3 5
ie) x[, 2]
[1] 3 4

By default, when a single element of a matrix is retrieved, it is returned as
a vector of length 1 rather than a 1x1 matrix. This behavior can be turned off
by setting drop = FALSE.
ie) x <- matrix(1:6, 2, 3)
ie) x[1, 2]
[1] 3
ie) x[1, 2, drop = FALSE]
    [, 1]
[1,]   3

Similarly, subsetting a single column or a single row will give you a vector,
not a matrix (by default).
ie) x <- matrix(1:6, 2, 3)
ie) x[1, ]
[1] 1 3 5
ie) x[1, , drop = FALSE]
    [,1] [,2] [,3]
[1,]   1    3    5

subsetting lists
ie) x <- list(foo = 1:4, bar = 0.)
ie) x[1]
$foo
[1] 1 2 3 4
ie) x[[1]]
[1] 1 2 3 4
x$bar
[1] 0.6
ie) x[["bar"]]
[1] 0.6
ie) x["bar"]
$bar
[1] 0.6

Extracting multiple elements of a list.
ie) x <- list(foo = 1:4, bar = 0.6, baz = "hello")
ie) x[c(1, 3)]
$foo
[1] 1 2 3 4
$baz
[1] "hello"

The [[ operator can be used with computed indices; $ can only be used with
literal names.
ie) x <- list(foo = 1:4, bar = 0.6, baz = "hello")
ie) name <- "foo"
ie) x[[name]] ## computed index for 'foo'
[1] 1 2 3 4
ie) x$name ## element 'name' doesn't literally exist!
NULL
ie) x$foo ## element 'foo' does literally exist.
[1] 1 2 3 4

The [[ can take an integer sequence.
ie) x <- list(a = list(10, 12, 14), b = c(3.14, 2.81))
ie) x[[c(1, 3)]]
[1] 14
ie) x[[1]][[3]]
[1] 14
ie) x[[c(2, 1)]]
[1] 3.14

Partial matching of names is allowed with [[ and $
ie) x <- list(aardvark = 1:5)
ie) x$a
[1] 1 2 3 4 5
ie) x[["a"]] ##by default [[ doesn't do partial matching
NULL
ie) x[["a", exact = FALSE]]
[1] 1 2 3 4 5

A common task is to remove missing values (NAs).
ie) x <- c(1, 2, NA, 4, NA, 5)
ie) bad <- is.na(x)
ie) x[!bad]
[1] 1 2 4 5

What if there are multiple things and you want to take the subset with no
missing values?
ie) x <- c(1, 2, NA, 4, NA, 5)
ie) y <- c("a", "b", NA, "d", NA, "f")
ie) good <- complete.cases(x, y)
good
[1] TRUE TRUE FALSE TRUE FALSE TRUE
ie) x[good]
[1] 1 2 4 5
ie) y[good]
[1] "a" "b" "d" "f"

Let's say you have a data in a data frame, to get the rows of data w/o NA
ie) airquality[1:6, ]
ie) good <- complete.cases(airquality)
ie) airquality[good, ][1:6, ]

VECTORIZED OPERATIONS LECTURE
Many operations in R are vectorized making code more efficient, cocise, and
easier to read.
ie) x <- 1:4; y <- 6:9
ie) x + y
[1] 7 9 11 13
ie) x > 2
[1] FALSE FALSE TRUE TRUE
ie) x >= 2
[1] FALSE TRUE TRUE TRUE
ie) y == 8
[1] FALSE FALSE TRUE FALSE
ie) x * y
[1] 6 14 24 36
ie) x / y
[1] 0.166666 0.285713 0.375000 0.444444

vectorized matrix operations
ie) x <- matrix(1:4, 2, 2); y <- matrix(rep(10, 4), 2, 2)
ie) x * y ## element-wise multiplication
     [,1] [,2]
[1,]  10   30
[2,]  20   40
ie) x / y
     [,1] [,2]
[1,]  0.1   0.3
[2,]  0.2   0.4
ie) x %*% y ## true matrix multiplication
     [,1] [,2]
[1,]  40   40
[2,]  60   60

